{"version":3,"sources":["images/logo.svg","images/icon-error.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","regEx","email","error","handleSubmit","e","preventDefault","test","forceUpdate","setState","handleChange","target","value","className","src","logo","alt","onSubmit","this","noValidate","type","placeholder","onChange","iconerror","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,qMC0F5BC,E,4MApFbC,MAAQ,CACNC,MAAO,2CACPC,MAAO,GACPC,OAAO,G,EAGTC,aAAe,SAACC,GACdA,EAAEC,iBAEuB,KAArB,EAAKN,MAAME,OAAiB,EAAKF,MAAMC,MAAMM,KAAK,EAAKP,MAAME,QAK/D,EAAKM,cACL,EAAKC,SAAS,CACZN,OAAO,EACPD,MAAO,MAPT,EAAKO,SAAS,CACZN,OAAO,K,EAWbO,aAAe,SAACL,GACd,EAAKI,SAAS,CACZP,MAAOG,EAAEM,OAAOC,S,uDAIlB,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OAAOC,IAAKC,IAAMC,IAAI,SACrC,qCACQ,8CAER,yBAAKH,UAAU,mBACb,uLAMF,0BAAMI,SAAUC,KAAKd,aAAce,YAAU,GAC3C,2BACEC,KAAK,QACLC,YAAY,gBACZC,SAAUJ,KAAKR,aACfE,MAAOM,KAAKlB,MAAME,QAEpB,4BAAQkB,KAAK,UAAb,KACCF,KAAKlB,MAAMG,OACV,yBAAKU,UAAU,SACb,yBAAKA,UAAU,YAAYC,IAAKS,IAAWP,IAAI,eADjD,kCAOJ,gCACE,uBAAGH,UAAU,eAAb,eACe,IACb,uBACEW,KAAK,8CACLb,OAAO,SACPc,IAAI,uBAHN,mBAFF,aAQa,IACX,uBACED,KAAK,oCACLb,OAAO,SACPc,IAAI,uBAHN,oBATF,OAmBJ,yBAAKZ,UAAU,yB,GA/ELa,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.fb916241.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.877543ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-error.33780997.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './images/logo.svg';\nimport iconerror from './images/icon-error.svg';\n\nclass App extends Component {\n  state = {\n    regEx: /[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}/gim,\n    email: '',\n    error: false,\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(this.state.email);\n    if (this.state.email === '' || !this.state.regEx.test(this.state.email)) {\n      this.setState({\n        error: true,\n      });\n    } else {\n      this.forceUpdate();\n      this.setState({\n        error: false,\n        email: '',\n      });\n    }\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      email: e.target.value,\n    });\n  };\n  render() {\n    return (\n      <div className='grid-container'>\n        <div className='left-container'>\n          <img className='logo' src={logo} alt='Logo' />\n          <h2>\n            We're <span>coming soon</span>\n          </h2>\n          <div className='texto-container'>\n            <p>\n              Hello fellow shoppers! We're currently building our new fashion\n              store. Add your email below to stay up-to-date with announcements\n              and our launch deals.\n            </p>\n          </div>\n          <form onSubmit={this.handleSubmit} noValidate>\n            <input\n              type='email'\n              placeholder='Email Address'\n              onChange={this.handleChange}\n              value={this.state.email}\n            />\n            <button type='submit'>></button>\n            {this.state.error && (\n              <div className='error'>\n                <img className='iconerror' src={iconerror} alt='Icon Error' />\n                Please, provide a valid Email\n              </div>\n            )}\n          </form>\n\n          <footer>\n            <p className='attribution'>\n              Challenge by{' '}\n              <a\n                href='https://www.frontendmentor.io?ref=challenge'\n                target='_blank'\n                rel='noopener noreferrer'>\n                Frontend Mentor\n              </a>\n              . Coded by{' '}\n              <a\n                href='https://josegarciamanez.github.io'\n                target='_blank'\n                rel='noopener noreferrer'>\n                @josegarciamanez\n              </a>\n              .\n            </p>\n          </footer>\n        </div>\n        <div className='right-container'></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}